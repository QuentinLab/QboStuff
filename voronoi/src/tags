!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
computeBrushfire	testCostmap.cpp	/^void testCostmap::computeBrushfire()$/;"	f	class:global_planner::testCostmap
computeClosest	testCostmap.cpp	/^int testCostmap::computeClosest(int goal)$/;"	f	class:global_planner::testCostmap
computeGrad	testCostmap.cpp	/^void testCostmap::computeGrad()$/;"	f	class:global_planner::testCostmap
computeGraph	testCostmap.cpp	/^void testCostmap::computeGraph()$/;"	f	class:global_planner::testCostmap
computePathVoro	testCostmap.cpp	/^void testCostmap::computePathVoro()$/;"	f	class:global_planner::testCostmap
computePathWorld	testCostmap.cpp	/^void testCostmap::computePathWorld(std::vector<geometry_msgs::PoseStamped>& path)$/;"	f	class:global_planner::testCostmap
dijkstraPath	testCostmap.cpp	/^void testCostmap::dijkstraPath(int s)$/;"	f	class:global_planner::testCostmap
distanceFilling	testCostmap.cpp	/^void testCostmap::distanceFilling()$/;"	f	class:global_planner::testCostmap
distanceInit	testCostmap.cpp	/^void testCostmap::distanceInit()$/;"	f	class:global_planner::testCostmap
findNeighbours	testCostmap.cpp	/^void testCostmap::findNeighbours(int ind)$/;"	f	class:global_planner::testCostmap
global_planner	testCostmap.cpp	/^namespace global_planner{$/;"	n	file:
initialize	testCostmap.cpp	/^void testCostmap::initialize(std::string name,costmap_2d::Costmap2DROS* costmap_ros)$/;"	f	class:global_planner::testCostmap
makePlan	testCostmap.cpp	/^bool testCostmap::makePlan(const geometry_msgs::PoseStamped& start, const geometry_msgs::PoseStamped& goal,  std::vector<geometry_msgs::PoseStamped>& plan )$/;"	f	class:global_planner::testCostmap
makePlanService	testCostmap.cpp	/^bool testCostmap::makePlanService(voronoi::MakemyNavPlan::Request & req, voronoi::MakemyNavPlan::Response& resp)$/;"	f	class:global_planner::testCostmap
mapThresholding	testCostmap.cpp	/^void testCostmap::mapThresholding()$/;"	f	class:global_planner::testCostmap
mapToWorld	testCostmap.cpp	/^void testCostmap::mapToWorld(double mx, double my, double& wx, double& wy) $/;"	f	class:global_planner::testCostmap
orderModule	testCostmap.cpp	/^void testCostmap::orderModule()$/;"	f	class:global_planner::testCostmap
poseCallback	testCostmap.cpp	/^void testCostmap::poseCallback(const geometry_msgs::PoseStamped::ConstPtr & goal)$/;"	f	class:global_planner::testCostmap
queueInit	testCostmap.cpp	/^void testCostmap::queueInit()$/;"	f	class:global_planner::testCostmap
setCostmap	testCostmap.cpp	/^void testCostmap::setCostmap( COSTTYPE *cmap, bool isROS, bool allow_unknown)$/;"	f	class:global_planner::testCostmap
setNavArray	testCostmap.cpp	/^void testCostmap::setNavArray()$/;"	f	class:global_planner::testCostmap
testCostmap	testCostmap.cpp	/^testCostmap::testCostmap()$/;"	f	class:global_planner::testCostmap
testCostmap	testCostmap.cpp	/^testCostmap::testCostmap(std::string name,costmap_2d::Costmap2DROS* costmap_ros)$/;"	f	class:global_planner::testCostmap
~testCostmap	testCostmap.cpp	/^testCostmap::~testCostmap()$/;"	f	class:global_planner::testCostmap
